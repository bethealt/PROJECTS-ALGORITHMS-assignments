Reverse
Given a numerical array, reverse the order of values, in-place. The reversed array should have the same length, with existing elements moved to other indices so that order of elements is reversed. Working 'in-place' means that you cannot use a second 
array â€“ move values within the array that you are given. As always, do not use built-in array functions such as splice().

function reverse(arr) {
    for (var i=0; i < arr.length; i++) {
        var temp1 = arr[i];
        arr[i] = arr[arr.length-1];
        arr[arr.length-1] = temp1;
        var temp2 = arr[i];
        arr[i] = arr[arr.length-2];
        arr[arr.length-2] = temp2;
    }
    console.log(arr);
    return arr;
}

reverse([ 'a', 'b', 1, 2 ]);

output: [ 1, 2, 'a', 'b' ]

function reverse(arr) {
    // Loop through the array - but only halfway (otherwise we unreverse and get the original array back)
    for (var i = 0; i < arr.length / 2; i++) {
        // Swap values
        var temp = arr[i];
        arr[i] = arr[arr.length - 1 - i];
        arr[arr.length - 1 - i] = temp;
    }
    console.log(arr);
    return(arr);
}

output: [ 2, 1, 'b', 'a' ]

Rotate
Implement rotateArr(arr, shiftBy) that accepts array and offset. Shift arr's values to the right by that amount. 'Wrap-around' any values that shift off array's end to the other side, so that no data is lost. Operate in-place: given ([1,2,3],1), 
change the array to [3,1,2]. Don't use built-in functions.
Second: allow negative shiftBy (shift L, not R).
Third: minimize memory usage. With no new array, handle arrays/shiftBys in the millions.
Fourth: minimize the touches of each element.

function rotateArr(arr, shiftBy) {
   for (var i=0; i < arr.length; i++) {
       var  temp = arr[i];
       arr[i] = arr[i + shiftBy];
       arr[i + shiftBy] = temp;
    }
    console.log(arr);
    return arr;
}

rotateArr([1,2,3],1);

output: 
[ 2, 3, 1 ]







Filter Range
Alan is good at breaking secret codes. One method is to eliminate values that lie outside of a specific known range. Given arr and values min and max, retain only the array values between min and max. Work in-place: return the array you are given, with values in original order. No built-in array functions.

function filterRange(arr, min, max) {

}

filterRange();

output:

Concat
Replicate JavaScript's concat(). Create a standalone function that accepts two arrays. Return a new array containing the first array's elements, followed by the second array's elements. Do not alter the original arrays. Ex.: arrConcat( ['a','b'], [1,2] ) should return new array ['a','b',1,2].

function likeConcat(arr1,arr2) {
    var arr3 = [];
    arr3 = [...arr1, ...arr2];
    console.log(arr3);
    return arr3;
}

likeConcat(['a','b'], [1,2]);

output: [ 'a', 'b', 1, 2 ]''